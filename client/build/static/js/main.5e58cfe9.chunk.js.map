{"version":3,"sources":["helpers/Cell.js","helpers/Board.js","components/Cell.jsx","components/Row.jsx","components/PlayArea.jsx","App.js","index.js"],"names":["x","y","this","content","width","height","board","reset","push","Cell","color","length","row","inARow","currentColor","cell","k","cellClickHandler","className","onClick","e","stopPropagation","Row","map","index","key","nextColor","PlayArea","useState","Board","gameOver","game","setGame","prevGame","newGame","cloneDeep","placeLowest","checkForWin","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e58cfe9.chunk.js","sourcesContent":["export default class {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.content = null;\n  }\n};\n","import Cell from './Cell';\n\nexport default class {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.board = [];\n    this.reset();\n  }\n\n  reset() {\n    for (let y = 0; y < this.height; y++) {\n      this.board[y] = [];\n      for (let x = 0; x < this.width; x++) {\n        this.board[y].push(new Cell(x, y));\n      }\n    }\n    return this;\n  }\n\n  placeLowest(color, x) {\n    for (let y = this.board.length - 1; y >= 0; y--) {\n      if (!this.board[y][x].content) {\n        return this.board[y][x].content = color;\n      }\n    }\n  }\n\n  checkForWin() {\n    const amountToWin = 4;\n\n    // check horizontal\n    for (const row of this.board) {\n      let inARow = 0;\n      let currentColor;\n      for (const cell of row) {\n        if (cell.content) {\n          if (cell.content === currentColor) {\n            inARow++;\n          } else {\n            currentColor = cell.content;\n            inARow = 1;\n          }\n        } else {\n          inARow = 0;\n        }\n        if (inARow === amountToWin) {\n          return true;\n        }\n      }\n    }\n\n    // check vertical\n    for (let x = 0; x < this.width; x++) {\n      let inARow = 0;\n      let currentColor;\n      for (let y = 0; y < this.height; y++) {\n        const cell = this.board[y][x];\n        if (cell.content) {\n          if (cell.content === currentColor) {\n            inARow++;\n          } else {\n            currentColor = cell.content;\n            inARow = 1;\n          }\n        } else {\n          inARow = 0;\n        }\n        if (inARow === amountToWin) {\n          return true;\n        }\n      }\n    }\n\n    // check diagonals\n    for (let k = 0; k < this.width + this.height; k++) {\n      let inARow = 0;\n      let currentColor;\n      for (let y = this.height - 1; y >= 0; y--) {\n        const x = k - y;\n        if (x >= 0 && x < this.width) {\n          const cell = this.board[y][x];\n          if (cell.content) {\n            if (cell.content === currentColor) {\n              inARow++;\n            } else {\n              currentColor = cell.content;\n              inARow = 1;\n            }\n          } else {\n            inARow = 0;\n          }\n          if (inARow === amountToWin) {\n            return true;\n          }\n        }\n      }\n    }\n\n    for (let k = 0; k < this.width + this.height; k++) {\n      let inARow = 0;\n      let currentColor;\n      for (let y = this.height - 1; y >= 0; y--) {\n        const x = k - (this.height - y);\n        if (x >= 0 && x < this.width) {\n          const cell = this.board[y][x];\n          if (cell.content) {\n            if (cell.content === currentColor) {\n              inARow++;\n            } else {\n              currentColor = cell.content;\n              inARow = 1;\n            }\n          } else {\n            inARow = 0;\n          }\n          if (inARow === amountToWin) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n};\n","import React from 'react';\nimport './Cell.scss';\n\nconst Cell = ({cell, cellClickHandler}) => {\n  const className = `cell ${cell.content ? cell.content : ''}`;\n\n  const clickHandler = (event) => {\n    event.stopPropagation();\n    cellClickHandler(cell);\n  }\n\n  return (\n    <div className={className} onClick={(e) => clickHandler(e)}></div>\n  )\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './Cell';\nimport './Row.scss';\n\nconst Row = ({row, cellClickHandler}) => {\n  return (\n    <div className=\"row\">\n    { row.map((cell, index) => <Cell key={index} cell={cell} cellClickHandler={cellClickHandler} />) }\n    </div>\n  )\n};\n\nexport default Row;\n","import React, { useState } from 'react';\nimport Board from '../helpers/Board';\nimport Row from './Row';\nimport { cloneDeep } from 'lodash';\nimport './PlayArea.scss';\n\nconst nextColor = (currentColor) => {\n  return currentColor === 'red' ? 'blue' : 'red';\n};\n\nconst PlayArea = () => {\n  const [game, setGame] = useState({\n    board: new Board(7, 6),\n    currentColor: 'red',\n    gameOver: false\n  });\n\n  const cellClickHandler = (cell) => {\n    if (!cell.content && !game.gameOver) {\n      setGame(prevGame => {\n        const newGame = {...prevGame, board: cloneDeep(prevGame.board)};\n        newGame.board.placeLowest(newGame.currentColor, cell.x);\n        newGame.currentColor = nextColor(newGame.currentColor);\n        newGame.gameOver = newGame.board.checkForWin();\n        return newGame;\n      });\n    }\n  };\n\n  const resetGame = () => {\n    setGame(prevGame => {\n      const newGame = {...prevGame, board: cloneDeep(prevGame.board)};\n      newGame.board.reset();\n      newGame.currentColor = 'red';\n      newGame.gameOver = false;\n      return newGame;\n    });\n  };\n\n  return (\n    <div className=\"parent\">\n      <div className=\"play-area\">\n        { game.board.board.map((row, index) => (\n          <Row\n            key={index}\n            row={row}\n            cellClickHandler={cellClickHandler} \n          />)) }\n      </div>\n      <div className=\"data-display\">\n        { !game.gameOver && <h2>It's {game.currentColor}'s turn!</h2> }\n        { game.gameOver && <h2>Game Over! {nextColor(game.currentColor)} wins!</h2> }\n        <button onClick={resetGame}>Start New Game</button>\n      </div>\n    </div>\n  )\n};\n\nexport default PlayArea;\n","import React from 'react';\nimport './App.css';\nimport PlayArea from './components/PlayArea';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <PlayArea />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}